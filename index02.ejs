<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>ブロック崩しゲーム</title>
    <style>
    	* { padding: 0; margin: 0; }
    	canvas { background: #f5f1e5; display: block; margin: 0 auto; }
    </style>
</head>
<body>

<h1>
	<% for (let item of items) { %>
		<%- item.name %>
	<% } %>
</h1>

<canvas id="myCanvas" width="850" height="630"></canvas>

<script>
	var canvas = document.getElementById("myCanvas");
	var ctx = canvas.getContext("2d");

	var x = canvas.width / 2;
	var y = canvas.height - 30;
	var dx = 4;
	var dy = -3;
	
	var ballRadius = 10;

	var paddleHeight = 5;
	var paddleWidth = 100;
	var paddleX = (canvas.width - paddleWidth) / 2;

	var rightPressed = false;
	var leftPressed = false;

	var brickRowCount = Math.floor( Math.random() * 8 ) + 5;
	var brickColumnCount = Math.floor( Math.random() * 5 ) + 5;
	var brickWidth = 75;
	var brickHeight = 20;
	var brickPadding = 10;
	var brickOffsetTop = 30;
	var brickOffsetLeft = (canvas.width - (brickWidth * brickColumnCount + brickPadding * (brickColumnCount - 1))) / 2;

	var score = 0;

	var lives = 3;

	var randomColor = "#" + Math.floor(Math.random() * 0xFFFFFF).toString(16);

	var bricks = [];
	for(var c = 0; c < brickColumnCount; c++) {
		bricks[c] = [];
		for(var r = 0; r < brickRowCount; r++) {
			if (r % 2 == 0) {
				if (c % 2 == 0) {
					bricks[c][r] = { x: 0, y: 0, status: 3 };
				}
				else {
					bricks[c][r] = { x: 0, y: 0, status: 2 };
				}
			}
			else {
				if (c % 2 == 1) {
					bricks[c][r] = { x: 0, y: 0, status: 3 };
				}
				else {
					bricks[c][r] = { x: 0, y: 0, status: 2 };
				}
			}
		}
	}
	
	function drawBall() {
		ctx.beginPath();
		ctx.arc(x, y, ballRadius, 0, Math.PI * 2);
		ctx.fillStyle = randomColor;
		ctx.fill();
		ctx.closePath();
	}

	function drawPaddle() {
		ctx.beginPath();
		ctx.rect(paddleX, canvas.height - paddleHeight, paddleWidth, paddleHeight);
		ctx.fillStyle = "#ff8240";
		ctx.fill();
		ctx.closePath();
	}

	function drawBricks() {
		for(var c = 0; c < brickColumnCount; c++) {
			for(var r = 0; r < brickRowCount; r++) {
				if(bricks[c][r].status != 0) {
					var brickX = (c * (brickWidth+brickPadding)) + brickOffsetLeft;
					var brickY = (r * (brickHeight+brickPadding)) + brickOffsetTop;
					bricks[c][r].x = brickX;
					bricks[c][r].y = brickY;
					ctx.beginPath();
					ctx.rect(brickX, brickY, brickWidth, brickHeight);
					if (bricks[c][r].status == 3) {
						ctx.fillStyle = "#0000DD";
					}
					else if (bricks[c][r].status == 2) {
						ctx.fillStyle = "#880088";
					}
					else if (bricks[c][r].status == 1) {
						ctx.fillStyle = "#DD0000";
					}
					ctx.fill();
					ctx.closePath();
				}
			}
		}
	}

	document.addEventListener("keydown", keyDownHandler, false);
	document.addEventListener("keyup", keyUpHandler, false);

	document.addEventListener("mousemove", mouseMoveHandler, false);

	function mouseMoveHandler(e) {
		var relativeX = e.clientX - canvas.offsetLeft;
		if(relativeX > paddleWidth/2 && relativeX < canvas.width - paddleWidth/2) {
			paddleX = relativeX - paddleWidth/2;
		}
	}

	function keyDownHandler(e) {
		if(e.key == "Right" || e.key == "ArrowRight") {
			rightPressed = true;
		}
		else if(e.key == "Left" || e.key == "ArrowLeft") {
			leftPressed = true;
		}
	}

	function keyUpHandler(e) {
		if(e.key == "Right" || e.key == "ArrowRight") {
			rightPressed = false;
		}
		else if(e.key == "Left" || e.key == "ArrowLeft") {
        		leftPressed = false;
		}
	}

	function collisionDetection() {
		for(var c = 0; c < brickColumnCount; c++) {
			for(var r = 0; r < brickRowCount; r++) {
				var b = bricks[c][r];
				if(b.status != 0) {
					if(x > b.x && x < b.x + brickWidth && y > b.y && y < b.y + brickHeight) {
						dy = -dy;
						b.status--;

						randomColor = "#" + Math.floor(Math.random() * 0xFFFFFF).toString(16);

						if (b.status == 0) {
							score++;
						}
						if(score == brickRowCount * brickColumnCount) {
							alert("YOU WIN, CONGRATULATIONS!\n点数 : " + score + "\n達成率 : 100%");
							document.location.reload();
						}
					}
				}
			}
		}
	}

	function drawScore() {
		ctx.font = "16px Arial";
		ctx.fillStyle = "red";
		ctx.fillText("Score: " + score, 8, 20);
	}

	function drawLives() {
		ctx.font = "16px Arial";
		ctx.fillStyle = "red";
		ctx.fillText("Lives: " + lives, canvas.width - 65, 20);
	}

	function draw() {
		ctx.clearRect(0, 0, canvas.width, canvas.height);
		drawBricks();
		drawBall();
		drawPaddle();
		drawScore();
		drawLives();
		collisionDetection();

		x += dx;
		y += dy;

		if(x + dx > canvas.width - ballRadius || x + dx < ballRadius) {
			dx = -dx;

			randomColor = "#" + Math.floor(Math.random() * 0xFFFFFF).toString(16);
		}

		if(y + dy < ballRadius) {
			dy = -dy;

			randomColor = "#" + Math.floor(Math.random() * 0xFFFFFF).toString(16);
		}
		else if(y + dy > canvas.height - (ballRadius / 2)) {
			if(x > paddleX && x < paddleX + paddleWidth) {
				dy = -(dy + 0.25);

				randomColor = "#" + Math.floor(Math.random() * 0xFFFFFF).toString(16);
			}
			else {
				lives--;
				paddleWidth -= 25;
				if(!lives) {
					alert("GAME OVER\n点数 : " + score + "\n達成率 : " + Math.floor((score * 100) / (brickRowCount * brickColumnCount)) + "%");
					document.location.reload();
				}
				else {
					x = canvas.width / 2;
					y = canvas.height - 30;
					dx = 4 + (3 - lives);
					dy = -3;
					paddleX = (canvas.width - paddleWidth) / 2;

					randomColor = "#" + Math.floor(Math.random() * 0xFFFFFF).toString(16);
				}
			}
		}

		if(rightPressed && paddleX < canvas.width-paddleWidth) {
			paddleX += 7;
		}
		else if(leftPressed && paddleX > 0) {
			paddleX -= 7;
		}

		requestAnimationFrame(draw);
	}

	draw();
</script>

</body>
</html>